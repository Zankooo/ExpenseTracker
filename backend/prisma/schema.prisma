// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model User {
  id String @id @default (auto()) @map("_id") @db.ObjectId
  username String @unique
  password String 
  email String @unique
  expenses Expense[]
  returnsFrom Return[] @relation("PaymentFrom") 
  returnsTo Return[] @relation("PaymentTo")
  groups UserGroup[]
}

model UserGroup {
  id String @id @default (auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])
  userId String @db.ObjectId
  groupId String @db.ObjectId
  isAdmin Boolean
  @@index([userId, groupId])
}

model Group {
  id String @id @default (auto()) @map("_id") @db.ObjectId
  name String 
  description String 
  expenses Expense[]
  members UserGroup[] 
}

model Expense {
  id String @id @default (auto()) @map("_id") @db.ObjectId
  cost Float 
  date DateTime @default(now())
  name String

  group Group @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  //category Category @relation(fields: [categoryId], references: [id])
  //categoryId String @db.ObjectId

}

//model Category {
  //id String @id @default (auto()) @map("_id") @db.ObjectId
  //name String 
  //expenses Expense[]
//}

model Return {
  id String @id @default (auto()) @map("_id") @db.ObjectId
  amount Float

  payer User @relation("PaymentFrom", fields: [payerId], references: [id])
  payerId String @db.ObjectId

  payee User @relation("PaymentTo", fields: [payeeId], references: [id])
  payeeId String @db.ObjectId
  
}

